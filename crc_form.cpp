/*

	crc_form.cpp
	author Golubkin Egor (Gorin), Russia
	///////////////////////////////////////////////
	dialog for calc CRC
*/   
 
 #include <QtGui>
 #include <QtGui/QPushButton>

 #include "crc_form.h"

QDialogCRC::QDialogCRC(QWidget * parent)
	: QDialog(parent)
{
	setupUi(this);

	QTextCodec *codec = QTextCodec::codecForLocale();
	QTextCodec::setCodecForTr(codec);
	QTextCodec::setCodecForCStrings(codec);
	
	connect(bt_compute, SIGNAL(clicked(bool)), this, SLOT(calcCRC()));
	connect(bt_copy, SIGNAL(clicked(bool)), this, SLOT(copy()));
	rbt_HEX->setChecked(true);
}

QDialogCRC::~QDialogCRC()
{
}

void QDialogCRC::calcCRC()
{
	QByteArray data;
	getdataIn(data);
	unsigned short crc = 0;
	if (rbt_crc16->isChecked())
		crc = calcCRC16(data);
	if (rbt_crcMODBUS->isChecked())
		crc = calcCRC_MODBUS(data);
        if (rbt_crcNMEA->isChecked())
                crc = calcCRC_NMEA(data);
	unsigned short crcLo, crcHi;
	crcLo = (crc|0xFF00)^0xFF00;//Lo
	crcHi = crc>>8;//Hi
	
	QString res;
	if (rbt_ASCII->isChecked())//ASCII
		res = (char)crcLo+(char)crcHi;
        if (rbt_NMEA->isChecked())//NMEA
                res = QString((char)crcHi)+QString((char)crcLo);
	if (rbt_Dec->isChecked())//Dec
	{
		res = QString("%1 %2").arg(crcLo).arg(crcHi);
	}
	if (rbt_BIN->isChecked())//BIN
	{
		res = QString("%1 %2").arg(crcLo,0,2).arg(crcHi,0,2);
	}
	if (rbt_HEX->isChecked())//HEX
	{
		res = QString("%1 %2").arg(crcLo,0,16).arg(crcHi,0,16);
	}

	line_CRC->setText(res);
	if (rbt_ASCII->isChecked())
		line_out->setText(line_in->text()+res);
	else
		line_out->setText(line_in->text()+' '+res);
        if (rbt_NMEA->isChecked())
                line_out->setText(line_in->text()+res);
}

unsigned short QDialogCRC::calcCRC16 (const QByteArray &data)
{
	unsigned short y = 0xFFFF;
	unsigned char temp;
	for (int i = 0; i<data.size();i++)
	{
		temp = (unsigned char)data[i];
		y = y^temp;
		for (int counter = 8; counter>0; counter--)
		{
			y = y>>1;
			if ((y & 1)!=0)
				y = y^0xA001;
		}
	}
	return y;
}

unsigned short QDialogCRC::calcCRC_MODBUS (const QByteArray &data)
{
	static unsigned char auchCRCHi[] = {
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40};

	static unsigned char auchCRCLo[] = {
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40};
	
	unsigned char temp;
	unsigned short usDataLen = data.size();

	unsigned char   uchCRCHi  = 0xFF ; /* high byte of CRC initialized */
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
	unsigned char  uIndex  ; /* will index into CRC lookup table */

  while (usDataLen--) /* pass through message buffer */
  {
	  temp = (unsigned char)data[data.size()-usDataLen-1];
     uIndex  = uchCRCLo ^ temp ; /* calculate the CRC */
    uchCRCLo =  uchCRCHi  ^ auchCRCHi[ uIndex ] ;
	 uchCRCHi  = auchCRCLo[ uIndex ] ;
  }

  return ((unsigned short) uchCRCHi  << 8 | uchCRCLo) ;
}

unsigned short QDialogCRC::calcCRC_NMEA (const QByteArray &data)
{
    unsigned short crc = 0;
    unsigned char tmp = (unsigned char)data[0];
    unsigned char tmp1, tmp2;
    for (int i = 1; i < data.size(); ++i)
    {
        tmp ^= (unsigned char)data[i];
    }
    tmp1 = tmp & 0xF0;//high 4 bits
    tmp1 = tmp1 >> 4;
    tmp2 = tmp & 0x0F;//low 4 bits
    QString resStr = QString("%1%2").arg(tmp1,1,16).arg(tmp2,1,16);
    resStr = resStr.toUpper();
    QByteArray  resByteArr = resStr.toAscii();
    crc = (unsigned char)resByteArr.at(0);
    crc = crc<<8;
    crc += (unsigned char)resByteArr.at(1);
    return crc;
}

void QDialogCRC::getdataIn(QByteArray &data)
{
	data.clear();
	QString str = line_in->text().toAscii();
	if (rbt_ASCII->isChecked())//ASCII
	{
		data = str.toAscii();
	}

        if (rbt_NMEA->isChecked())//NMEA
        {
                data = str.toAscii();
                data.remove(data.indexOf('$'),1);
                data.remove(data.indexOf('*'),1);
        }

	if (rbt_Dec->isChecked())//Dec
	{
		QRegExp rx("(\\d+)");
		int pos = 0;
		while ((pos = rx.indexIn(str, pos)) != -1)
		{
			data.append((rx.cap(1)).toInt());
			pos += rx.matchedLength();
		}
	}
	if (rbt_BIN->isChecked())//BIN
	{
		QRegExp rx("([01]+)");
		int pos = 0;
		while ((pos = rx.indexIn(str, pos)) != -1)
		{
			bool ok;
			data.append((rx.cap(1)).toInt(&ok, 2));
			pos += rx.matchedLength();
		}
	}
	if (rbt_HEX->isChecked())//HEX
	{
		QRegExp rx("([0-9a-fA-F]+)");
		int pos = 0;
		while ((pos = rx.indexIn(str, pos)) != -1)
		{
			bool ok;
			data.append((rx.cap(1)).toInt(&ok, 16));
			pos += rx.matchedLength();
		}
	}
}

void QDialogCRC::copy()
{
	QString strCopy;
	strCopy = line_out->text();
	emit textCopy(strCopy);
}

